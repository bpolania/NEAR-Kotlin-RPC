name: OpenAPI Spec Update

on:
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - '.github/workflows/openapi-update.yml'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_regeneration:
        description: 'Force regeneration even if spec unchanged'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache OpenAPI spec
      uses: actions/cache@v3
      with:
        path: openapi-spec-cached.json
        key: openapi-spec-${{ github.sha }}
        restore-keys: |
          openapi-spec-
    
    - name: Fetch latest OpenAPI spec
      run: |
        curl -L https://raw.githubusercontent.com/near/nearcore/master/chain/jsonrpc/openapi/openapi.json \
          -o openapi-spec-new.json
    
    - name: Check for changes
      id: check_changes
      run: |
        if [ -f "openapi-spec-cached.json" ]; then
          if ! diff openapi-spec-new.json openapi-spec-cached.json > /dev/null 2>&1; then
            echo "OpenAPI spec has changed"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "diff_output<<EOF" >> $GITHUB_OUTPUT
            diff -u openapi-spec-cached.json openapi-spec-new.json | head -100 >> $GITHUB_OUTPUT || true
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "OpenAPI spec unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "No cached spec found, treating as changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
        
        # Handle force regeneration
        if [ "${{ github.event.inputs.force_regeneration }}" == "true" ]; then
          echo "Force regeneration requested"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate code if spec changed
      if: steps.check_changes.outputs.changed == 'true'
      run: |
        mv openapi-spec-new.json openapi-spec.json
        chmod +x scripts/generate-from-openapi.sh
        ./scripts/generate-from-openapi.sh
        
        # Save the new spec as cached for next run
        cp openapi-spec.json openapi-spec-cached.json
    
    - name: Check for code changes
      if: steps.check_changes.outputs.changed == 'true'
      id: check_code_changes
      run: |
        if git diff --quiet; then
          echo "No code changes after generation"
          echo "code_changed=false" >> $GITHUB_OUTPUT
        else
          echo "Code changes detected"
          echo "code_changed=true" >> $GITHUB_OUTPUT
          
          # Get list of changed files
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          git diff --name-status | head -20 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Pull Request
      if: steps.check_changes.outputs.changed == 'true' && steps.check_code_changes.outputs.code_changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'feat: update generated code from OpenAPI spec'
        title: 'Update generated code from OpenAPI spec'
        body: |
          ## OpenAPI Specification Update
          
          This PR updates the generated code based on the latest OpenAPI specification from [nearcore](https://github.com/near/nearcore/blob/master/chain/jsonrpc/openapi/openapi.json).
          
          ### Changes Detected
          
          <details>
          <summary>OpenAPI Spec Diff (first 100 lines)</summary>
          
          ```diff
          ${{ steps.check_changes.outputs.diff_output }}
          ```
          </details>
          
          <details>
          <summary>Generated Files Changed</summary>
          
          ```
          ${{ steps.check_code_changes.outputs.changed_files }}
          ```
          </details>
          
          ### Automated Checks
          
          - [ ] Tests pass
          - [ ] Code compiles successfully
          - [ ] No breaking changes (manual review required)
          
          ### Next Steps
          
          1. Review the generated code changes
          2. Run integration tests locally if needed
          3. Merge this PR to trigger release-please
          
          ---
          *This PR was automatically generated by the OpenAPI update workflow.*
        branch: auto/openapi-update
        delete-branch: true
        reviewers: |
          maintainer1
          maintainer2
        labels: |
          automated
          openapi-update
          needs-review
        
    - name: Run tests on PR branch
      if: steps.check_changes.outputs.changed == 'true' && steps.check_code_changes.outputs.code_changed == 'true'
      run: |
        git checkout auto/openapi-update
        chmod +x gradlew
        ./gradlew test
        
    - name: Comment on PR with test results
      if: steps.check_changes.outputs.changed == 'true' && steps.check_code_changes.outputs.code_changed == 'true'
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
        body: |
          ### Test Results
          
          All tests passed on the updated code.
          
          ```
          ./gradlew test
          BUILD SUCCESSFUL
          ```
          
          Please review the changes and merge if everything looks good.